$date
	Mon May 11 18:58:05 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbanch $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module single_cpu $end
$var wire 1 ! clk $end
$var wire 1 # imm_command $end
$var wire 1 " rst $end
$var wire 1 $ ori $end
$var wire 1 % jump $end
$var wire 1 & imm $end
$var wire 1 ' bne $end
$var wire 1 ( andi $end
$var wire 1 ) addi $end
$var wire 6 * OpCode [5:0] $end
$var wire 9 + ConOut [8:0] $end
$scope module control_flow $end
$var wire 1 ) addi $end
$var wire 1 , alusrc $end
$var wire 1 ( andi $end
$var wire 1 - beq $end
$var wire 1 ' bne $end
$var wire 1 . branch $end
$var wire 1 & imm $end
$var wire 1 % j $end
$var wire 1 / lw $end
$var wire 1 0 memread $end
$var wire 1 1 memtoreg $end
$var wire 1 2 memwrite $end
$var wire 1 $ ori $end
$var wire 1 3 r $end
$var wire 1 4 regdst $end
$var wire 1 5 regwrite $end
$var wire 1 6 sw $end
$var wire 2 7 WB [1:0] $end
$var wire 9 8 Out [8:0] $end
$var wire 6 9 Op [5:0] $end
$var wire 3 : M [2:0] $end
$var wire 4 ; EXE [3:0] $end
$upscope $end
$scope module data_flow $end
$var wire 9 < ConOut [8:0] $end
$var wire 1 = ExtSel $end
$var wire 1 > IFFlush $end
$var wire 1 ? PCSrc $end
$var wire 1 ) addi $end
$var wire 1 ( andi $end
$var wire 1 ' bne $end
$var wire 1 ! clk $end
$var wire 1 # imm_command $end
$var wire 1 % jump $end
$var wire 1 $ ori $end
$var wire 1 " rst $end
$var wire 5 @ ws [4:0] $end
$var wire 32 A wd [31:0] $end
$var wire 5 B shamt [4:0] $end
$var wire 5 C rs3 [4:0] $end
$var wire 5 D rs2 [4:0] $end
$var wire 5 E rs1 [4:0] $end
$var wire 32 F rdata [31:0] $end
$var wire 32 G rd2_imm_out [31:0] $end
$var wire 32 H rd2 [31:0] $end
$var wire 32 I rd1 [31:0] $end
$var wire 32 J plus_4_out [31:0] $end
$var wire 32 K pc_out [31:0] $end
$var wire 32 L pc_in [31:0] $end
$var wire 32 M jabs [31:0] $end
$var wire 32 N imm_valuereg [31:0] $end
$var wire 16 O imm [15:0] $end
$var wire 6 P funct [5:0] $end
$var wire 32 Q ext [31:0] $end
$var wire 32 R command [31:0] $end
$var wire 32 S br [31:0] $end
$var wire 32 T alu_res [31:0] $end
$var wire 26 U address [25:0] $end
$var wire 32 V WriteDataOut [31:0] $end
$var wire 2 W WBreg_mem_wb [1:0] $end
$var wire 2 X WBreg_idex [1:0] $end
$var wire 2 Y WBreg [1:0] $end
$var wire 5 Z RegRtreg [4:0] $end
$var wire 5 [ RegRsreg [4:0] $end
$var wire 5 \ RegRdreg [4:0] $end
$var wire 5 ] RegRDreg_mem_wb [4:0] $end
$var wire 5 ^ RegRDreg [4:0] $end
$var wire 6 _ RegOpCode [5:0] $end
$var wire 32 ` PC_Plus4Reg [31:0] $end
$var wire 1 a PCWrite $end
$var wire 6 b OpCode [5:0] $end
$var wire 3 c Mreg_idex [2:0] $end
$var wire 3 d Mreg [2:0] $end
$var wire 32 e Memreg [31:0] $end
$var wire 32 f MUX3_forwardRD2_out [31:0] $end
$var wire 32 g MUX3_forwardRD1_out [31:0] $end
$var wire 32 h InstReg [31:0] $end
$var wire 1 i IFIDWrite $end
$var wire 9 j IDcontrol [8:0] $end
$var wire 1 k HazMuxCon $end
$var wire 2 l ForwardB [1:0] $end
$var wire 2 m ForwardA [1:0] $end
$var wire 4 n EXreg [3:0] $end
$var wire 32 o DataBreg [31:0] $end
$var wire 32 p DataAreg [31:0] $end
$var wire 32 q ALUreg_mem_wb [31:0] $end
$var wire 32 r ALUreg [31:0] $end
$var wire 1 s ALUSrc $end
$scope module EXMEM $end
$var wire 1 ! clock $end
$var wire 1 " rst $end
$var wire 32 t WriteDataIn [31:0] $end
$var wire 2 u WB [1:0] $end
$var wire 5 v RegRD [4:0] $end
$var wire 3 w M [2:0] $end
$var wire 32 x ALUOut [31:0] $end
$var reg 32 y ALUreg [31:0] $end
$var reg 3 z Mreg [2:0] $end
$var reg 5 { RegRDreg [4:0] $end
$var reg 2 | WBreg [1:0] $end
$var reg 32 } WriteDataOut [31:0] $end
$upscope $end
$scope module ForwardUnit $end
$var wire 5 ~ MEMRegRd [4:0] $end
$var wire 1 !" MEM_RegWrite $end
$var wire 1 "" WB_RegWrite $end
$var wire 5 #" WBRegRd [4:0] $end
$var wire 5 $" EXRegRt [4:0] $end
$var wire 5 %" EXRegRs [4:0] $end
$var reg 2 &" ForwardA [1:0] $end
$var reg 2 '" ForwardB [1:0] $end
$upscope $end
$scope module GPRs $end
$var wire 1 (" RegWrite $end
$var wire 1 ! clk $end
$var wire 32 )" rd1 [31:0] $end
$var wire 32 *" rd2 [31:0] $end
$var wire 1 " rst $end
$var wire 5 +" ws [4:0] $end
$var wire 32 ," wd [31:0] $end
$var wire 5 -" rs2 [4:0] $end
$var wire 5 ." rs1 [4:0] $end
$var integer 32 /" i [31:0] $end
$upscope $end
$scope module HazardUnit $end
$var wire 1 0" EXMemRead $end
$var wire 5 1" IDRegRt [4:0] $end
$var wire 5 2" IDRegRs [4:0] $end
$var wire 5 3" EXRegRt [4:0] $end
$var reg 1 k HazMuxCon $end
$var reg 1 i IFIDWrite $end
$var reg 1 a PCWrite $end
$upscope $end
$scope module IDEX $end
$var wire 32 4" DataA [31:0] $end
$var wire 32 5" DataB [31:0] $end
$var wire 4 6" EX [3:0] $end
$var wire 3 7" M [2:0] $end
$var wire 2 8" WB [1:0] $end
$var wire 1 ! clock $end
$var wire 1 " rst $end
$var wire 32 9" imm_value [31:0] $end
$var wire 5 :" RegRt [4:0] $end
$var wire 5 ;" RegRs [4:0] $end
$var wire 5 <" RegRd [4:0] $end
$var wire 6 =" OpCode [5:0] $end
$var reg 32 >" DataAreg [31:0] $end
$var reg 32 ?" DataBreg [31:0] $end
$var reg 4 @" EXreg [3:0] $end
$var reg 3 A" Mreg [2:0] $end
$var reg 6 B" RegOpCode [5:0] $end
$var reg 5 C" RegRdreg [4:0] $end
$var reg 5 D" RegRsreg [4:0] $end
$var reg 5 E" RegRtreg [4:0] $end
$var reg 2 F" WBreg [1:0] $end
$var reg 32 G" imm_valuereg [31:0] $end
$upscope $end
$scope module IFID $end
$var wire 1 i IFIDWrite $end
$var wire 1 ! clock $end
$var wire 1 > flush $end
$var wire 1 " rst $end
$var wire 32 H" PC_Plus4 [31:0] $end
$var wire 32 I" Inst [31:0] $end
$var reg 32 J" InstReg [31:0] $end
$var reg 32 K" PC_Plus4Reg [31:0] $end
$upscope $end
$scope module MEMWB $end
$var wire 32 L" ALUOut [31:0] $end
$var wire 5 M" RegRD [4:0] $end
$var wire 2 N" WB [1:0] $end
$var wire 1 ! clock $end
$var wire 1 " rst $end
$var wire 32 O" Memout [31:0] $end
$var reg 32 P" ALUreg [31:0] $end
$var reg 32 Q" Memreg [31:0] $end
$var reg 5 R" RegRDreg [4:0] $end
$var reg 2 S" WBreg [1:0] $end
$upscope $end
$scope module MUX3_forwardRD1 $end
$var wire 2 T" A [1:0] $end
$var wire 32 U" X0 [31:0] $end
$var wire 32 V" X2 [31:0] $end
$var wire 32 W" X1 [31:0] $end
$var reg 32 X" Out [31:0] $end
$upscope $end
$scope module MUX3_forwardRD2 $end
$var wire 2 Y" A [1:0] $end
$var wire 32 Z" X0 [31:0] $end
$var wire 32 [" X2 [31:0] $end
$var wire 32 \" X1 [31:0] $end
$var reg 32 ]" Out [31:0] $end
$upscope $end
$scope module PCcontrol $end
$var wire 1 ? PCSrc $end
$var wire 1 % jump $end
$var wire 32 ^" rind [31:0] $end
$var wire 32 _" pc_plus_4 [31:0] $end
$var wire 1 `" nextpc $end
$var wire 32 a" jabs [31:0] $end
$var wire 32 b" br [31:0] $end
$var wire 1 c" PCMuxOut $end
$var reg 32 d" out [31:0] $end
$upscope $end
$scope module WRcontrol $end
$var wire 1 e" WBSrc $end
$var wire 32 f" alu_out [31:0] $end
$var wire 32 g" data_memory_out [31:0] $end
$var reg 32 h" out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 i" in1 [31:0] $end
$var wire 6 j" op_code [5:0] $end
$var wire 32 k" in2 [31:0] $end
$var reg 32 l" out [31:0] $end
$upscope $end
$scope module choose_rd2_imm $end
$var wire 1 s BSrc $end
$var wire 32 m" imm [31:0] $end
$var wire 32 n" rd2 [31:0] $end
$var wire 32 o" out [31:0] $end
$upscope $end
$scope module choose_write_reg $end
$var wire 1 p" RegDst $end
$var wire 5 q" rs2 [4:0] $end
$var wire 5 r" rs3 [4:0] $end
$var reg 5 s" ws [4:0] $end
$upscope $end
$scope module comand_parser $end
$var wire 32 t" command [31:0] $end
$var wire 6 u" op_code [5:0] $end
$var reg 26 v" address [25:0] $end
$var reg 6 w" funct [5:0] $end
$var reg 16 x" imm [15:0] $end
$var reg 5 y" rs1 [4:0] $end
$var reg 5 z" rs2 [4:0] $end
$var reg 5 {" shamt [4:0] $end
$var reg 5 |" ws [4:0] $end
$upscope $end
$scope module data_memory $end
$var wire 1 }" MemRead $end
$var wire 1 ~" MemWrite $end
$var wire 32 !# addr [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 "# wdata [31:0] $end
$var reg 32 ## rdata [31:0] $end
$var integer 32 $# i [31:0] $end
$upscope $end
$scope module extend $end
$var wire 26 %# in [25:0] $end
$var wire 32 &# out [31:0] $end
$upscope $end
$scope module imm_ext $end
$var wire 1 = ExtSel $end
$var wire 32 '# ext [31:0] $end
$var wire 16 (# imm [15:0] $end
$upscope $end
$scope module inst_memory $end
$var wire 32 )# addr [31:0] $end
$var reg 32 *# inst [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 a PCWrite $end
$var wire 1 ! clk $end
$var wire 32 +# in [31:0] $end
$var wire 1 " rst $end
$var reg 32 ,# out [31:0] $end
$upscope $end
$scope module plus_4 $end
$var wire 32 -# in [31:0] $end
$var wire 32 .# out [31:0] $end
$upscope $end
$scope module two_in_sum $end
$var wire 32 /# imm [31:0] $end
$var wire 32 0# in1 [31:0] $end
$var wire 32 1# out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 1#
b0 0#
bx /#
b100 .#
b0 -#
b0 ,#
bx +#
b10001100000000010000000000000001 *#
b0 )#
bx (#
bx '#
b0xxxxxxxxxxxxxxxxxxxxxxxxxx &#
bx %#
b100000 $#
bx ##
b0 "#
b0 !#
0~"
0}"
b0 |"
b0 {"
b0 z"
b0 y"
bx x"
b0 w"
bx v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
0p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
0e"
bx d"
0c"
bx b"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx a"
0`"
b100 _"
bz ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
bx O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b10001100000000010000000000000001 I"
b100 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
bx 9"
b1 8"
b0 7"
b1010 6"
b10 5"
b10 4"
b0 3"
b0 2"
b0 1"
00"
b100000 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b10 *"
b10 )"
0("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
0""
0!"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
0s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
1k
b10001010 j
1i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
1a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
bx U
b0 T
bx S
b10001100000000010000000000000001 R
bx Q
b0 P
bx O
b0 N
b0xxxxxxxxxxxxxxxxxxxxxxxxxx M
bx L
b0 K
b100 J
b10 I
b10 H
b0 G
bx F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
0?
0>
1=
b10001010 <
b1010 ;
b0 :
b0 9
b10001010 8
b1 7
06
15
14
13
02
01
00
0/
0.
0-
0,
b10001010 +
b0 *
0)
0(
0'
0&
0%
0$
z#
1"
0!
$end
#1
1s
1,
b10 7"
b11 8"
11
b10 :
10
1/
b11 7
15
b100 6"
b110100100 j
04
b110100100 +
b110100100 8
b110100100 <
b100 ;
03
b1000 S
b1000 b"
b1000 1#
b0 M
b0 a"
b0 &#
b0 U
b0 v"
b0 %#
b1 Q
b1 9"
b1 '#
b1 /#
b1 O
b1 x"
b1 (#
b1 D
b1 -"
b1 1"
b1 :"
b1 z"
b100011 *
b100011 9
b100011 b
b100011 ="
b100011 u"
b100 `
b100 K"
b100 0#
b10001100000000010000000000000001 h
b10001100000000010000000000000001 J"
b10001100000000010000000000000001 t"
b100000 /"
1!
#2
0!
0"
#3
b0 R
b0 I"
b0 *#
b10 f
b10 t
b10 ]"
b10 n"
b10 g
b10 X"
b10 i"
x`"
xc"
b11 T
b11 x
b11 l"
b1 @
b1 v
b1 +"
b1 s"
b1 G
b1 k"
b1 o"
bx A
bx ,"
bx W"
bx \"
bx h"
bx J
bx H"
bx _"
bx .#
bx K
bx )#
bx ,#
bx -#
b100011 _
b100011 B"
b100011 j"
b1 Z
b1 $"
b1 3"
b1 E"
b1 q"
b1 N
b1 G"
b1 m"
b10 o
b10 ?"
b10 Z"
b10 p
b10 >"
b10 U"
b100 n
b100 @"
b10 c
b10 w
b10 A"
b11 X
b11 u
b11 F"
bx e
bx Q"
bx g"
1!
#4
0!
#5
b11 f
b11 t
b11 ]"
b11 n"
b101 T
b101 x
b101 l"
14
13
b11 G
b11 k"
b11 o"
b1010 6"
0s
b1010 ;
0,
15
b1 8"
b0 7"
b10001010 j
b1 7
01
b10001010 +
b10001010 8
b10001010 <
b0 :
00
0/
b0 A
b0 ,"
b0 W"
b0 \"
b0 h"
b10 l
b10 '"
b10 Y"
b11 F
b11 O"
b11 ##
10"
1}"
1e"
1!"
b0 D
b0 -"
b0 1"
b0 :"
b0 z"
b0 *
b0 9
b0 b
b0 ="
b0 u"
b10 V
b10 }
b10 "#
b1 ^
b1 {
b1 ~
b1 M"
b11 r
b11 y
b11 L"
b11 V"
b11 ["
b11 !#
b10 d
b10 z
b11 Y
b11 |
b11 N"
bx S
bx b"
bx 1#
bx `
bx K"
bx 0#
b0 h
b0 J"
b0 t"
1!
#6
0!
#7
b100 T
b100 x
b100 l"
b10 G
b10 k"
b10 o"
b10 f
b10 t
b10 ]"
b10 n"
b0 8"
b0 6"
b0 j
0k
0i
0a
b0 @
b0 v
b0 +"
b0 s"
1p"
b101 F
b101 O"
b101 ##
b0 l
b0 '"
b0 Y"
b11 A
b11 ,"
b11 W"
b11 \"
b11 h"
1""
1("
b0 _
b0 B"
b0 j"
b0 Z
b0 $"
b0 3"
b0 E"
b0 q"
b1010 n
b1010 @"
b0 c
b0 w
b0 A"
b1 X
b1 u
b1 F"
b11 V
b11 }
b11 "#
b101 r
b101 y
b101 L"
b101 V"
b101 ["
b101 !#
b1 ]
b1 #"
b1 R"
b11 q
b11 P"
b11 f"
b11 e
b11 Q"
b11 g"
b11 W
b11 S"
1!
#8
0!
#9
b1 8"
b1010 6"
b10001010 j
1k
1i
1a
b101 A
b101 ,"
b101 W"
b101 \"
b101 h"
00"
0}"
0e"
0p"
b101 q
b101 P"
b101 f"
b101 e
b101 Q"
b101 g"
b10 V
b10 }
b10 "#
b0 ^
b0 {
b0 ~
b0 M"
b100 r
b100 y
b100 L"
b100 V"
b100 ["
b100 !#
b0 d
b0 z
b1 Y
b1 |
b1 N"
b0 n
b0 @"
b0 X
b0 u
b0 F"
b11 I
b11 )"
b11 4"
b11 H
b11 *"
b11 5"
1!
#10
0!
#11
b11 G
b11 k"
b11 o"
b110 T
b110 x
b110 l"
b11 f
b11 t
b11 ]"
b11 n"
b11 g
b11 X"
b11 i"
1p"
0!"
b101 I
b101 )"
b101 4"
b101 H
b101 *"
b101 5"
b11 o
b11 ?"
b11 Z"
b11 p
b11 >"
b11 U"
b1010 n
b1010 @"
b1 X
b1 u
b1 F"
b0 Y
b0 |
b0 N"
b0 ]
b0 #"
b0 R"
b100 q
b100 P"
b100 f"
b1 W
b1 S"
1!
#12
0!
#13
b101 G
b101 k"
b101 o"
b1010 T
b1010 x
b1010 l"
b101 f
b101 t
b101 ]"
b101 n"
b101 g
b101 X"
b101 i"
0""
0("
1!"
b0 W
b0 S"
b11 V
b11 }
b11 "#
b110 r
b110 y
b110 L"
b110 V"
b110 ["
b110 !#
b1 Y
b1 |
b1 N"
b101 o
b101 ?"
b101 Z"
b101 p
b101 >"
b101 U"
1!
#14
0!
#15
1""
1("
b101 V
b101 }
b101 "#
b1010 r
b1010 y
b1010 L"
b1010 V"
b1010 ["
b1010 !#
b110 q
b110 P"
b110 f"
b1 W
b1 S"
1!
#16
0!
#17
b1010 q
b1010 P"
b1010 f"
1!
#18
0!
#19
1!
#20
0!
#21
1!
#22
0!
#23
1!
#24
0!
#25
1!
#26
0!
#27
1!
#28
0!
#29
1!
#30
0!
#31
1!
#32
0!
#33
1!
#34
0!
#35
1!
#36
0!
#37
1!
#38
0!
#39
1!
#40
0!
#41
1!
#42
0!
#43
1!
#44
0!
#45
1!
#46
0!
#47
1!
#48
0!
#49
1!
#50
0!
