$date
	Thu Mar 12 22:13:49 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbanch $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module single_cpu $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # zero $end
$var wire 2 $ WBSrc [1:0] $end
$var wire 1 % RegWrite $end
$var wire 2 & RegDst [1:0] $end
$var wire 2 ' PCSrc [1:0] $end
$var wire 1 ( OpenSel $end
$var wire 6 ) OpCode [5:0] $end
$var wire 1 * MemWrite $end
$var wire 1 + ExtSel $end
$var wire 1 , BSrc $end
$scope module control_flow $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # zero $end
$var wire 6 - OpCode [5:0] $end
$var reg 1 , BSrc $end
$var reg 1 + ExtSel $end
$var reg 1 * MemWrite $end
$var reg 1 ( OpenSel $end
$var reg 2 . PCSrc [1:0] $end
$var reg 2 / RegDst [1:0] $end
$var reg 1 % RegWrite $end
$var reg 2 0 WBSrc [1:0] $end
$upscope $end
$scope module data_flow $end
$var wire 1 , BSrc $end
$var wire 1 + ExtSel $end
$var wire 1 * MemWrite $end
$var wire 1 ( OpenSel $end
$var wire 2 1 PCSrc [1:0] $end
$var wire 2 2 RegDst [1:0] $end
$var wire 1 % RegWrite $end
$var wire 2 3 WBSrc [1:0] $end
$var wire 1 ! clk $end
$var wire 1 4 lk $end
$var wire 1 " rst $end
$var wire 1 # zero $end
$var wire 5 5 ws [4:0] $end
$var wire 32 6 wd [31:0] $end
$var wire 5 7 shamt [4:0] $end
$var wire 5 8 rs3 [4:0] $end
$var wire 5 9 rs2 [4:0] $end
$var wire 5 : rs1 [4:0] $end
$var wire 32 ; rdata [31:0] $end
$var wire 32 < rd2_imm_out [31:0] $end
$var wire 32 = rd2 [31:0] $end
$var wire 32 > rd1 [31:0] $end
$var wire 32 ? plus_4_out [31:0] $end
$var wire 32 @ pc_out [31:0] $end
$var wire 32 A pc_in [31:0] $end
$var wire 32 B jabs [31:0] $end
$var wire 16 C imm [15:0] $end
$var wire 6 D funct [5:0] $end
$var wire 32 E ext [31:0] $end
$var wire 32 F command [31:0] $end
$var wire 32 G br [31:0] $end
$var wire 32 H alu_res [31:0] $end
$var wire 26 I address [25:0] $end
$var wire 6 J OpCode [5:0] $end
$scope module GPRs $end
$var wire 1 % RegWrite $end
$var wire 1 4 clk $end
$var wire 32 K rd1 [31:0] $end
$var wire 32 L rd2 [31:0] $end
$var wire 1 " rst $end
$var wire 5 M ws [4:0] $end
$var wire 32 N wd [31:0] $end
$var wire 5 O rs2 [4:0] $end
$var wire 5 P rs1 [4:0] $end
$var integer 32 Q i [31:0] $end
$upscope $end
$scope module PCcontrol $end
$var wire 2 R PCSrc [1:0] $end
$var wire 32 S rind [31:0] $end
$var wire 32 T pc_plus_4 [31:0] $end
$var wire 32 U jabs [31:0] $end
$var wire 32 V br [31:0] $end
$var reg 32 W out [31:0] $end
$upscope $end
$scope module WRcontrol $end
$var wire 2 X WBSrc [1:0] $end
$var wire 32 Y plus_4_out [31:0] $end
$var wire 32 Z data_memory_out [31:0] $end
$var wire 32 [ alu_out [31:0] $end
$var reg 32 \ out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 ] in1 [31:0] $end
$var wire 1 # zero $end
$var wire 6 ^ op_code [5:0] $end
$var wire 32 _ in2 [31:0] $end
$var reg 32 ` out [31:0] $end
$upscope $end
$scope module choose_rd2_imm $end
$var wire 1 , BSrc $end
$var wire 32 a rd2 [31:0] $end
$var wire 32 b out [31:0] $end
$var wire 32 c imm [31:0] $end
$upscope $end
$scope module choose_write_reg $end
$var wire 2 d RegDst [1:0] $end
$var wire 5 e rs3 [4:0] $end
$var wire 5 f rs2 [4:0] $end
$var reg 5 g ws [4:0] $end
$upscope $end
$scope module comand_parser $end
$var wire 6 h op_code [5:0] $end
$var wire 32 i command [31:0] $end
$var reg 26 j address [25:0] $end
$var reg 6 k funct [5:0] $end
$var reg 16 l imm [15:0] $end
$var reg 5 m rs1 [4:0] $end
$var reg 5 n rs2 [4:0] $end
$var reg 5 o shamt [4:0] $end
$var reg 5 p ws [4:0] $end
$upscope $end
$scope module data_memory $end
$var wire 1 * MemWrite $end
$var wire 32 q addr [31:0] $end
$var wire 1 ! clk $end
$var wire 32 r rdata [31:0] $end
$var wire 1 " rst $end
$var wire 32 s wdata [31:0] $end
$var integer 32 t i [31:0] $end
$upscope $end
$scope module extend $end
$var wire 26 u in [25:0] $end
$var wire 32 v out [31:0] $end
$upscope $end
$scope module imm_ext $end
$var wire 1 + ExtSel $end
$var wire 16 w imm [15:0] $end
$var wire 32 x ext [31:0] $end
$upscope $end
$scope module inst_memory $end
$var wire 32 y addr [31:0] $end
$var reg 32 z inst [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ! clk $end
$var wire 32 { in [31:0] $end
$var wire 1 " rst $end
$var reg 32 | out [31:0] $end
$upscope $end
$scope module plus_4 $end
$var wire 32 } in [31:0] $end
$var wire 32 ~ out [31:0] $end
$upscope $end
$scope module two_in_sum $end
$var wire 32 !" imm [31:0] $end
$var wire 32 "" in1 [31:0] $end
$var wire 32 #" out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1000 #"
b100 ""
b1 !"
b100 ~
b0 }
b0 |
b100 {
b10001100000000010000000000000001 z
b0 y
b1 x
b1 w
b0xxxxxxxxxxxxxxxxxxxxxxxxxx v
bx u
b100000 t
b11 s
b11 r
b11 q
bx p
bx o
b1 n
b0 m
b1 l
bx k
bx j
b10001100000000010000000000000001 i
b100011 h
b1 g
b1 f
bx e
b1 d
b1 c
b1 b
b11 a
b11 `
b1 _
b100011 ^
b10 ]
b11 \
b11 [
b11 Z
b100 Y
b10 X
b100 W
b1000 V
b0xxxxxxxxxxxxxxxxxxxxxxxxxx U
b100 T
b10 S
b11 R
b100000 Q
b0 P
b1 O
b11 N
b1 M
b11 L
b10 K
b100011 J
bx I
b11 H
b1000 G
b10001100000000010000000000000001 F
b1 E
bx D
b1 C
b0xxxxxxxxxxxxxxxxxxxxxxxxxx B
b100 A
b0 @
b100 ?
b10 >
b11 =
b1 <
b11 ;
b0 :
b1 9
bx 8
bx 7
b11 6
b1 5
z4
b10 3
b1 2
b11 1
b10 0
b1 /
b11 .
b100011 -
1,
0+
0*
b100011 )
x(
b11 '
b1 &
1%
b10 $
0#
1"
0!
$end
#1
b100000 t
1!
#2
0!
0"
#3
b111 =
b111 L
b111 a
b111 s
b111 6
b111 N
b111 \
b111 ;
b111 Z
b111 r
b111 H
b111 [
b111 `
b111 q
b101 <
b101 _
b101 b
b1 $
b1 0
b1 3
b1 X
b11 '
b11 .
b11 1
b11 R
b101 E
b101 c
b101 x
b101 !"
b1001 )
b1001 -
b1001 J
b1001 ^
b1001 h
b101 C
b101 l
b101 w
b1000 A
b1000 W
b1000 {
b100100000000010000000000000101 F
b100100000000010000000000000101 i
b100100000000010000000000000101 z
b11100 G
b11100 V
b11100 #"
b1000 ?
b1000 T
b1000 Y
b1000 ~
b1000 ""
b100 @
b100 y
b100 |
b100 }
1!
#4
0!
#5
1#
b111 <
b111 _
b111 b
b0 6
b0 N
b0 \
0,
0%
b0 '
b0 .
b0 1
b0 R
b1 E
b1 c
b1 x
b1 !"
b0 ;
b0 Z
b0 r
b0 H
b0 [
b0 `
b0 q
b100 )
b100 -
b100 J
b100 ^
b100 h
b1 C
b1 l
b1 w
b111 >
b111 K
b111 S
b111 ]
b1 :
b1 P
b1 m
b10000 A
b10000 W
b10000 {
b10000001000010000000000000001 F
b10000001000010000000000000001 i
b10000001000010000000000000001 z
b10000 G
b10000 V
b10000 #"
b1100 ?
b1100 T
b1100 Y
b1100 ~
b1100 ""
b1000 @
b1000 y
b1000 |
b1000 }
1!
#6
0!
#7
b0 &
b0 /
b0 2
b0 d
0%
1,
b10 '
b10 .
b10 1
b10 R
b11000 B
b11000 U
b11000 v
b11000 I
b11000 j
b11000 u
b11000 E
b11000 c
b11000 x
b11000 !"
b11000 <
b11000 _
b11000 b
b11111 5
b11111 M
b11111 g
b10 )
b10 -
b10 J
b10 ^
b10 h
b11000 C
b11000 l
b11000 w
b10 =
b10 L
b10 a
b10 s
b0 9
b0 O
b0 f
b0 n
b10 >
b10 K
b10 S
b10 ]
b0 :
b0 P
b0 m
b11000 A
b11000 W
b11000 {
b1000000000000000000000011000 F
b1000000000000000000000011000 i
b1000000000000000000000011000 z
b1110100 G
b1110100 V
b1110100 #"
b10100 ?
b10100 T
b10100 Y
b10100 ~
b10100 ""
b10000 @
b10000 y
b10000 |
b10000 }
1!
#8
0!
#9
b111 <
b111 _
b111 b
b1001 6
b1001 N
b1001 \
b10 5
b10 M
b10 g
0,
1%
b10 &
b10 /
b10 2
b10 d
b11 '
b11 .
b11 1
b11 R
0#
b1001 ;
b1001 Z
b1001 r
b1001 H
b1001 [
b1001 `
b1001 q
b100001 D
b100001 k
b0 7
b0 o
b10 8
b10 e
b10 p
b111 =
b111 L
b111 a
b111 s
b1 9
b1 O
b1 f
b1 n
b11100 A
b11100 W
b11100 {
b0 )
b0 -
b0 J
b0 ^
b0 h
b10001000000100001 B
b10001000000100001 U
b10001000000100001 v
b10001000000100001 I
b10001000000100001 j
b10001000000100001 u
b10001000000100001 F
b10001000000100001 i
b10001000000100001 z
b1111100 G
b1111100 V
b1111100 #"
b11100 ?
b11100 T
b11100 Y
b11100 ~
b11100 ""
b11000 @
b11000 y
b11000 |
b11000 }
1!
#10
0!
#11
b11 6
b11 N
b11 \
b1 E
b1 c
b1 x
b1 !"
b1 &
b1 /
b1 2
b1 d
0%
1,
1*
b11 '
b11 .
b11 1
b11 R
b1001 ;
b1001 Z
b1001 r
b11 H
b11 [
b11 `
b11 q
b1 C
b1 l
b1 w
b1 <
b1 _
b1 b
b10 5
b10 M
b10 g
b101011 )
b101011 -
b101011 J
b101011 ^
b101011 h
b1 D
b1 k
b0 8
b0 e
b0 p
b1001 =
b1001 L
b1001 a
b1001 s
b10 9
b10 O
b10 f
b10 n
b11 :
b11 P
b11 m
b100000 A
b100000 W
b100000 {
b10101100011000100000000000000001 F
b10101100011000100000000000000001 i
b10101100011000100000000000000001 z
b100100 G
b100100 V
b100100 #"
b100000 ?
b100000 T
b100000 Y
b100000 ~
b100000 ""
b11100 @
b11100 y
b11100 |
b11100 }
1!
#12
0!
#13
1#
b0 >
b0 K
b0 S
b0 ]
b0 6
b0 N
b0 \
b0 ;
b0 Z
b0 r
b0 H
b0 [
b0 `
b0 q
b0 <
b0 _
b0 b
0*
0,
1%
b10 &
b10 /
b10 2
b10 d
b11 '
b11 .
b11 1
b11 R
b0 D
b0 k
b0 E
b0 c
b0 x
b0 !"
b0 5
b0 M
b0 g
b0 )
b0 -
b0 J
b0 ^
b0 h
b0 C
b0 l
b0 w
b0 =
b0 L
b0 a
b0 s
b0 9
b0 O
b0 f
b0 n
b0 :
b0 P
b0 m
b0 F
b0 i
b0 z
b100100 A
b100100 W
b100100 {
b100100 G
b100100 V
b100100 #"
b100100 ?
b100100 T
b100100 Y
b100100 ~
b100100 ""
b100000 @
b100000 y
b100000 |
b100000 }
1!
#14
0!
#15
b101000 A
b101000 W
b101000 {
b101000 G
b101000 V
b101000 #"
b101000 ?
b101000 T
b101000 Y
b101000 ~
b101000 ""
b100100 @
b100100 y
b100100 |
b100100 }
1!
#16
0!
#17
b101100 A
b101100 W
b101100 {
b101100 G
b101100 V
b101100 #"
b101100 ?
b101100 T
b101100 Y
b101100 ~
b101100 ""
b101000 @
b101000 y
b101000 |
b101000 }
1!
#18
0!
#19
b110000 A
b110000 W
b110000 {
b110000 G
b110000 V
b110000 #"
b110000 ?
b110000 T
b110000 Y
b110000 ~
b110000 ""
b101100 @
b101100 y
b101100 |
b101100 }
1!
#20
0!
