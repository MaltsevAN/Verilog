$date
	Sun May 24 14:36:36 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbanch $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module single_cpu $end
$var wire 1 ! clk $end
$var wire 1 # imm_command $end
$var wire 1 " rst $end
$var wire 1 $ ori $end
$var wire 1 % jump $end
$var wire 1 & imm $end
$var wire 1 ' bne $end
$var wire 1 ( andi $end
$var wire 1 ) addi $end
$var wire 6 * OpCode [5:0] $end
$var wire 9 + ConOut [8:0] $end
$scope module control_flow $end
$var wire 1 ) addi $end
$var wire 1 , alusrc $end
$var wire 1 ( andi $end
$var wire 1 - beq $end
$var wire 1 ' bne $end
$var wire 1 . branch $end
$var wire 1 & imm $end
$var wire 1 % j $end
$var wire 1 / lw $end
$var wire 1 0 memread $end
$var wire 1 1 memtoreg $end
$var wire 1 2 memwrite $end
$var wire 1 $ ori $end
$var wire 1 3 r $end
$var wire 1 4 regdst $end
$var wire 1 5 regwrite $end
$var wire 1 6 sw $end
$var wire 2 7 WB [1:0] $end
$var wire 9 8 Out [8:0] $end
$var wire 6 9 Op [5:0] $end
$var wire 3 : M [2:0] $end
$var wire 4 ; EXE [3:0] $end
$upscope $end
$scope module data_flow $end
$var wire 9 < ConOut [8:0] $end
$var wire 1 = ExtSel $end
$var wire 1 > IFFlush $end
$var wire 1 ? PCSrc $end
$var wire 1 ) addi $end
$var wire 1 ( andi $end
$var wire 1 ' bne $end
$var wire 1 ! clk $end
$var wire 1 # imm_command $end
$var wire 1 % jump $end
$var wire 1 $ ori $end
$var wire 1 " rst $end
$var wire 5 @ ws [4:0] $end
$var wire 32 A wd [31:0] $end
$var wire 5 B shamt [4:0] $end
$var wire 5 C rs3 [4:0] $end
$var wire 5 D rs2 [4:0] $end
$var wire 5 E rs1 [4:0] $end
$var wire 32 F rdata [31:0] $end
$var wire 32 G rd2_imm_out [31:0] $end
$var wire 32 H rd2 [31:0] $end
$var wire 32 I rd1 [31:0] $end
$var wire 32 J plus_4_out [31:0] $end
$var wire 32 K pc_out [31:0] $end
$var wire 32 L pc_in [31:0] $end
$var wire 32 M memory_word [31:0] $end
$var wire 32 N jabs [31:0] $end
$var wire 32 O imm_valuereg [31:0] $end
$var wire 16 P imm [15:0] $end
$var wire 1 Q hit $end
$var wire 6 R funct [5:0] $end
$var wire 32 S ext [31:0] $end
$var wire 3 T counter [2:0] $end
$var wire 32 U command [31:0] $end
$var wire 32 V br [31:0] $end
$var wire 32 W alu_res [31:0] $end
$var wire 26 X address [25:0] $end
$var wire 32 Y WriteDataOut [31:0] $end
$var wire 2 Z WBreg_mem_wb [1:0] $end
$var wire 2 [ WBreg_idex [1:0] $end
$var wire 2 \ WBreg [1:0] $end
$var wire 5 ] RegRtreg [4:0] $end
$var wire 5 ^ RegRsreg [4:0] $end
$var wire 5 _ RegRdreg [4:0] $end
$var wire 5 ` RegRDreg_mem_wb [4:0] $end
$var wire 5 a RegRDreg [4:0] $end
$var wire 6 b RegOpCode [5:0] $end
$var wire 32 c PC_Plus4Reg [31:0] $end
$var wire 1 d PCWrite $end
$var wire 6 e OpCode [5:0] $end
$var wire 3 f Mreg_idex [2:0] $end
$var wire 3 g Mreg [2:0] $end
$var wire 32 h Memreg [31:0] $end
$var wire 32 i MUX3_forwardRD2_out [31:0] $end
$var wire 32 j MUX3_forwardRD1_out [31:0] $end
$var wire 1 k MEMWBWrite $end
$var wire 32 l InstReg [31:0] $end
$var wire 1 m IFIDWrite $end
$var wire 9 n IDcontrol [8:0] $end
$var wire 1 o IDEXWrite $end
$var wire 1 p HazMuxCon $end
$var wire 2 q ForwardB [1:0] $end
$var wire 2 r ForwardA [1:0] $end
$var wire 4 s EXreg [3:0] $end
$var wire 1 t EXMEMWrite $end
$var wire 32 u DataBreg [31:0] $end
$var wire 32 v DataAreg [31:0] $end
$var wire 1 w CacheStall $end
$var wire 32 x ALUreg_mem_wb [31:0] $end
$var wire 32 y ALUreg [31:0] $end
$var wire 1 z ALUSrc $end
$scope module EXMEM $end
$var wire 1 ! clock $end
$var wire 1 " rst $end
$var wire 32 { WriteDataIn [31:0] $end
$var wire 2 | WB [1:0] $end
$var wire 5 } RegRD [4:0] $end
$var wire 3 ~ M [2:0] $end
$var wire 1 t EXMEMWrite $end
$var wire 32 !" ALUOut [31:0] $end
$var reg 32 "" ALUreg [31:0] $end
$var reg 3 #" Mreg [2:0] $end
$var reg 5 $" RegRDreg [4:0] $end
$var reg 2 %" WBreg [1:0] $end
$var reg 32 &" WriteDataOut [31:0] $end
$upscope $end
$scope module ForwardUnit $end
$var wire 5 '" MEMRegRd [4:0] $end
$var wire 1 (" MEM_RegWrite $end
$var wire 1 )" WB_RegWrite $end
$var wire 5 *" WBRegRd [4:0] $end
$var wire 5 +" EXRegRt [4:0] $end
$var wire 5 ," EXRegRs [4:0] $end
$var reg 2 -" ForwardA [1:0] $end
$var reg 2 ." ForwardB [1:0] $end
$upscope $end
$scope module GPRs $end
$var wire 1 /" RegWrite $end
$var wire 1 ! clk $end
$var wire 32 0" rd1 [31:0] $end
$var wire 32 1" rd2 [31:0] $end
$var wire 1 " rst $end
$var wire 5 2" ws [4:0] $end
$var wire 32 3" wd [31:0] $end
$var wire 5 4" rs2 [4:0] $end
$var wire 5 5" rs1 [4:0] $end
$var integer 32 6" i [31:0] $end
$upscope $end
$scope module HazardUnit $end
$var wire 1 7" EXMemRead $end
$var wire 5 8" IDRegRt [4:0] $end
$var wire 5 9" IDRegRs [4:0] $end
$var wire 5 :" EXRegRt [4:0] $end
$var wire 1 w CacheStall $end
$var reg 1 t EXMEMWrite $end
$var reg 1 p HazMuxCon $end
$var reg 1 o IDEXWrite $end
$var reg 1 m IFIDWrite $end
$var reg 1 k MEMWBWrite $end
$var reg 1 d PCWrite $end
$upscope $end
$scope module IDEX $end
$var wire 32 ;" DataA [31:0] $end
$var wire 32 <" DataB [31:0] $end
$var wire 4 =" EX [3:0] $end
$var wire 1 o IDEXWrite $end
$var wire 3 >" M [2:0] $end
$var wire 2 ?" WB [1:0] $end
$var wire 1 ! clock $end
$var wire 1 " rst $end
$var wire 32 @" imm_value [31:0] $end
$var wire 5 A" RegRt [4:0] $end
$var wire 5 B" RegRs [4:0] $end
$var wire 5 C" RegRd [4:0] $end
$var wire 6 D" OpCode [5:0] $end
$var reg 32 E" DataAreg [31:0] $end
$var reg 32 F" DataBreg [31:0] $end
$var reg 4 G" EXreg [3:0] $end
$var reg 3 H" Mreg [2:0] $end
$var reg 6 I" RegOpCode [5:0] $end
$var reg 5 J" RegRdreg [4:0] $end
$var reg 5 K" RegRsreg [4:0] $end
$var reg 5 L" RegRtreg [4:0] $end
$var reg 2 M" WBreg [1:0] $end
$var reg 32 N" imm_valuereg [31:0] $end
$upscope $end
$scope module IFID $end
$var wire 1 m IFIDWrite $end
$var wire 1 ! clock $end
$var wire 1 > flush $end
$var wire 1 " rst $end
$var wire 32 O" PC_Plus4 [31:0] $end
$var wire 32 P" Inst [31:0] $end
$var reg 32 Q" InstReg [31:0] $end
$var reg 32 R" PC_Plus4Reg [31:0] $end
$upscope $end
$scope module MEMWB $end
$var wire 32 S" ALUOut [31:0] $end
$var wire 1 k MEMWBWrite $end
$var wire 5 T" RegRD [4:0] $end
$var wire 2 U" WB [1:0] $end
$var wire 1 ! clock $end
$var wire 1 " rst $end
$var wire 32 V" Memout [31:0] $end
$var reg 32 W" ALUreg [31:0] $end
$var reg 32 X" Memreg [31:0] $end
$var reg 5 Y" RegRDreg [4:0] $end
$var reg 2 Z" WBreg [1:0] $end
$upscope $end
$scope module MUX3_forwardRD1 $end
$var wire 2 [" A [1:0] $end
$var wire 32 \" X0 [31:0] $end
$var wire 32 ]" X2 [31:0] $end
$var wire 32 ^" X1 [31:0] $end
$var reg 32 _" Out [31:0] $end
$upscope $end
$scope module MUX3_forwardRD2 $end
$var wire 2 `" A [1:0] $end
$var wire 32 a" X0 [31:0] $end
$var wire 32 b" X2 [31:0] $end
$var wire 32 c" X1 [31:0] $end
$var reg 32 d" Out [31:0] $end
$upscope $end
$scope module PCcontrol $end
$var wire 1 ? PCSrc $end
$var wire 1 % jump $end
$var wire 32 e" pc_plus_4 [31:0] $end
$var wire 32 f" out [31:0] $end
$var wire 32 g" jabs [31:0] $end
$var wire 32 h" br [31:0] $end
$var wire 32 i" PCMuxOut [31:0] $end
$upscope $end
$scope module WRcontrol $end
$var wire 1 j" WBSrc $end
$var wire 32 k" alu_out [31:0] $end
$var wire 32 l" data_memory_out [31:0] $end
$var reg 32 m" out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 n" in1 [31:0] $end
$var wire 6 o" op_code [5:0] $end
$var wire 32 p" in2 [31:0] $end
$var reg 32 q" out [31:0] $end
$upscope $end
$scope module cache_memory $end
$var wire 1 w IsStall $end
$var wire 1 r" MemRead $end
$var wire 1 s" MemWrite $end
$var wire 32 t" addr [31:0] $end
$var wire 1 ! clk $end
$var wire 1 Q hit $end
$var wire 1 " rst $end
$var wire 32 u" wdata [31:0] $end
$var wire 1 v" v $end
$var wire 26 w" tag [25:0] $end
$var wire 2 x" offset_plus_counter [1:0] $end
$var wire 2 y" offset [1:0] $end
$var wire 32 z" memory_word [31:0] $end
$var wire 2 {" index [1:0] $end
$var wire 3 |" counter [2:0] $end
$var reg 32 }" cache_data_index [31:0] $end
$var reg 32 ~" rdata [31:0] $end
$var integer 32 !# i [31:0] $end
$upscope $end
$scope module choose_rd2_imm $end
$var wire 1 z BSrc $end
$var wire 32 "# imm [31:0] $end
$var wire 32 ## rd2 [31:0] $end
$var wire 32 $# out [31:0] $end
$upscope $end
$scope module choose_write_reg $end
$var wire 1 %# RegDst $end
$var wire 5 &# rs2 [4:0] $end
$var wire 5 '# rs3 [4:0] $end
$var reg 5 (# ws [4:0] $end
$upscope $end
$scope module comand_parser $end
$var wire 32 )# command [31:0] $end
$var wire 6 *# op_code [5:0] $end
$var reg 26 +# address [25:0] $end
$var reg 6 ,# funct [5:0] $end
$var reg 16 -# imm [15:0] $end
$var reg 5 .# rs1 [4:0] $end
$var reg 5 /# rs2 [4:0] $end
$var reg 5 0# shamt [4:0] $end
$var reg 5 1# ws [4:0] $end
$upscope $end
$scope module data_memory $end
$var wire 1 2# MemRead $end
$var wire 1 3# MemWrite $end
$var wire 32 4# addr [31:0] $end
$var wire 1 ! clk $end
$var wire 1 Q hit $end
$var wire 1 " rst $end
$var wire 32 5# wdata [31:0] $end
$var reg 3 6# counter [2:0] $end
$var reg 32 7# rdata [31:0] $end
$var integer 32 8# i [31:0] $end
$upscope $end
$scope module extend $end
$var wire 26 9# in [25:0] $end
$var wire 32 :# out [31:0] $end
$upscope $end
$scope module imm_ext $end
$var wire 1 = ExtSel $end
$var wire 32 ;# ext [31:0] $end
$var wire 16 <# imm [15:0] $end
$upscope $end
$scope module inst_memory $end
$var wire 32 =# addr [31:0] $end
$var reg 32 ># inst [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 d PCWrite $end
$var wire 1 ! clk $end
$var wire 32 ?# in [31:0] $end
$var wire 1 " rst $end
$var reg 32 @# out [31:0] $end
$upscope $end
$scope module plus_4 $end
$var wire 32 A# in [31:0] $end
$var wire 32 B# out [31:0] $end
$upscope $end
$scope module two_in_sum $end
$var wire 32 C# imm [31:0] $end
$var wire 32 D# in1 [31:0] $end
$var wire 32 E# out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx E#
b0 D#
bx C#
b100 B#
b0 A#
b0 @#
b100 ?#
b10001100000000010000000000000001 >#
b0 =#
bx <#
bx ;#
b0xxxxxxxxxxxxxxxxxxxxxxxxxx :#
bx 9#
b100000 8#
bx 7#
b0 6#
b0 5#
b0 4#
03#
02#
b0 1#
b0 0#
b0 /#
b0 .#
bx -#
b0 ,#
bx +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
0%#
b0 $#
b0 ##
b0 "#
b100 !#
bx ~"
bx }"
b0 |"
b0 {"
bx z"
b0 y"
b11 x"
b0 w"
0v"
b0 u"
b0 t"
0s"
0r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
0j"
b100 i"
bx h"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx g"
b100 f"
b100 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
bx V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b10001100000000010000000000000001 P"
b100 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
bx @"
b1 ?"
b0 >"
b1010 ="
b10 <"
b10 ;"
b0 :"
b0 9"
b0 8"
07"
b100000 6"
b0 5"
b0 4"
b0 3"
b0 2"
b10 1"
b10 0"
0/"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
0)"
0("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
0z
b0 y
b0 x
0w
b0 v
b0 u
1t
b0 s
b0 r
b0 q
1p
1o
b10001010 n
1m
b0 l
1k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
1d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
bx X
b0 W
bx V
b10001100000000010000000000000001 U
b0 T
bx S
b0 R
0Q
bx P
b0 O
b0xxxxxxxxxxxxxxxxxxxxxxxxxx N
bx M
b100 L
b0 K
b100 J
b10 I
b10 H
b0 G
bx F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
0?
0>
1=
b10001010 <
b1010 ;
b0 :
b0 9
b10001010 8
b1 7
06
15
14
13
02
01
00
0/
0.
0-
0,
b10001010 +
b0 *
0)
0(
0'
0&
0%
0$
z#
1"
0!
$end
#1
1z
1,
b10 >"
b11 ?"
11
b10 :
10
1/
b11 7
15
b100 ="
b110100100 n
04
b110100100 +
b110100100 8
b110100100 <
b100 ;
03
b1000 V
b1000 h"
b1000 E#
b0 N
b0 g"
b0 :#
b0 X
b0 +#
b0 9#
b1 S
b1 @"
b1 ;#
b1 C#
b1 P
b1 -#
b1 <#
b1 D
b1 4"
b1 8"
b1 A"
b1 /#
b100011 *
b100011 9
b100011 e
b100011 D"
b100011 *#
b100 c
b100 R"
b100 D#
b10001100000000010000000000000001 l
b10001100000000010000000000000001 Q"
b10001100000000010000000000000001 )#
b100000 6"
1!
#2
0!
0"
#3
b10 i
b10 {
b10 d"
b10 ##
b10 j
b10 _"
b10 n"
b1000 L
b1000 f"
b1000 ?#
b1000 i"
b100100000000010000000000000101 U
b100100000000010000000000000101 P"
b100100000000010000000000000101 >#
b11 W
b11 !"
b11 q"
b1 @
b1 }
b1 2"
b1 (#
b1 G
b1 p"
b1 $#
bx A
bx 3"
bx ^"
bx c"
bx m"
b1000 J
b1000 O"
b1000 e"
b1000 B#
b100 K
b100 =#
b100 @#
b100 A#
b100011 b
b100011 I"
b100011 o"
b1 ]
b1 +"
b1 :"
b1 L"
b1 &#
b1 O
b1 N"
b1 "#
b10 u
b10 F"
b10 a"
b10 v
b10 E"
b10 \"
b100 s
b100 G"
b10 f
b10 ~
b10 H"
b11 [
b11 |
b11 M"
bx h
bx X"
bx l"
1!
#4
0!
#5
b11 i
b11 {
b11 d"
b11 ##
b101 W
b101 !"
b101 q"
b11 G
b11 p"
b11 $#
0z
b0 ;
0,
05
b0 ?"
b0 >"
b0 ="
b0 7
01
b0 +
b0 8
b0 <
b0 :
00
0/
b0 n
b10 x"
0k
0t
0o
0p
0m
0d
1w
b1100 L
b1100 f"
b1100 ?#
b10 q
b10 ."
b10 `"
b11 y"
17"
12#
1r"
1("
b101 S
b101 @"
b101 ;#
b101 C#
b101 P
b101 -#
b101 <#
b1001 *
b1001 9
b1001 e
b1001 D"
b1001 *#
b1100 i"
b10000001000010000000000000111 U
b10000001000010000000000000111 P"
b10000001000010000000000000111 >#
b10 Y
b10 &"
b10 u"
b10 5#
b1 a
b1 $"
b1 '"
b1 T"
b11 y
b11 ""
b11 S"
b11 ]"
b11 b"
b11 t"
b11 4#
b10 g
b10 #"
b11 \
b11 %"
b11 U"
b11100 V
b11100 h"
b11100 E#
b1000 c
b1000 R"
b1000 D#
b100100000000010000000000000101 l
b100100000000010000000000000101 Q"
b100100000000010000000000000101 )#
b1100 J
b1100 O"
b1100 e"
b1100 B#
b1000 K
b1000 =#
b1000 @#
b1000 A#
1!
#6
0!
#7
b11 x"
b1 T
b1 |"
b1 6#
b11 M
b11 z"
b11 7#
1!
#8
0!
#9
b0 x"
b11 }"
b10 T
b10 |"
b10 6#
b100 M
b100 z"
b100 7#
1!
#10
0!
#11
b1 x"
b11 T
b11 |"
b11 6#
b101 M
b101 z"
b101 7#
b100 }"
1!
#12
0!
#13
b10 x"
b101 }"
b100 T
b100 |"
b100 6#
b110 M
b110 z"
b110 7#
1!
#14
0!
#15
b11 x"
b101 T
b101 |"
b101 6#
b110 }"
1!
#16
0!
#17
b11 F
b11 V"
b11 ~"
1k
1t
1o
0w
1Q
1v"
b10 x"
b100 }"
b0 T
b0 |"
b0 6#
1!
#18
0!
#19
b111 W
b111 !"
b111 q"
b101 G
b101 p"
b101 $#
b0 F
b0 V"
b0 ~"
b0 }"
b101 i
b101 {
b101 d"
b101 ##
0k
0t
0o
1w
0Q
0v"
b0 x"
b1 {"
b1 y"
b11 A
b11 3"
b11 ^"
b11 c"
b11 m"
1j"
1)"
1/"
b1001 b
b1001 I"
b1001 o"
b101 O
b101 N"
b101 "#
b0 s
b0 G"
b0 f
b0 ~
b0 H"
b0 [
b0 |
b0 M"
b11 Y
b11 &"
b11 u"
b11 5#
b101 y
b101 ""
b101 S"
b101 ]"
b101 b"
b101 t"
b101 4#
b1 `
b1 *"
b1 Y"
b11 x
b11 W"
b11 k"
b11 h
b11 X"
b11 l"
b11 Z
b11 Z"
1!
#20
0!
#21
b1 x"
b11 H
b11 1"
b11 <"
b1 T
b1 |"
b1 6#
b101 M
b101 z"
b101 7#
1!
#22
0!
#23
b10 x"
b10 T
b10 |"
b10 6#
b110 M
b110 z"
b110 7#
b101 }"
1!
#24
0!
#25
b11 x"
b110 }"
b11 T
b11 |"
b11 6#
b111 M
b111 z"
b111 7#
1!
#26
0!
#27
b0 x"
b100 T
b100 |"
b100 6#
b1000 M
b1000 z"
b1000 7#
b111 }"
1!
#28
0!
#29
b1 x"
b1000 }"
b101 T
b101 |"
b101 6#
1!
#30
0!
#31
b101 F
b101 V"
b101 ~"
1k
1t
1o
0w
1Q
b0 x"
1v"
b0 T
b0 |"
b0 6#
1!
#32
0!
#33
b101 W
b101 !"
b101 q"
b11 G
b11 p"
b11 $#
b11 i
b11 {
b11 d"
b11 ##
b10 x"
1p
1m
1d
b0 q
b0 ."
b0 `"
b101 A
b101 3"
b101 ^"
b101 c"
b101 m"
b11 y"
07"
02#
0r"
0("
b101 x
b101 W"
b101 k"
b101 h
b101 X"
b101 l"
b101 Y
b101 &"
b101 u"
b101 5#
b111 y
b111 ""
b111 S"
b111 ]"
b111 b"
b111 t"
b111 4#
b0 g
b0 #"
b0 \
b0 %"
b0 U"
b11 u
b11 F"
b11 a"
1!
#34
0!
#35
b0 U
b0 P"
b0 >#
1>
1?
b101 W
b101 !"
b101 q"
b11 G
b11 p"
b11 $#
b0 ?"
b100 >"
b1 ="
0z
b1000001 n
b100 :
1.
1-
b1 ;
0,
b1000001 +
b1000001 8
b1000001 <
b0 7
05
0&
0)
b101000 L
b101000 f"
b101000 ?#
b0 x"
b10000 i"
b111 S
b111 @"
b111 ;#
b111 C#
b111 P
b111 -#
b111 <#
b101 I
b101 0"
b101 ;"
b1 E
b1 5"
b1 9"
b1 B"
b1 .#
b100 *
b100 9
b100 e
b100 D"
b100 *#
b1 y"
0j"
0)"
0/"
b10000 J
b10000 O"
b10000 e"
b10000 B#
b1100 K
b1100 =#
b1100 @#
b1100 A#
b101000 V
b101000 h"
b101000 E#
b1100 c
b1100 R"
b1100 D#
b10000001000010000000000000111 l
b10000001000010000000000000111 Q"
b10000001000010000000000000111 )#
b101 H
b101 1"
b101 <"
b11 Y
b11 &"
b11 u"
b11 5#
b101 y
b101 ""
b101 S"
b101 ]"
b101 b"
b101 t"
b101 4#
b111 x
b111 W"
b111 k"
b0 Z
b0 Z"
1!
#36
0!
#37
b101 G
b101 p"
b101 $#
b101 i
b101 {
b101 d"
b101 ##
b101 j
b101 _"
b101 n"
0>
b1 ?"
0?
b1 7
15
b0 >"
b1010 ="
b10001010 n
14
13
b0 :
0.
b10001010 +
b10001010 8
b10001010 <
b1010 ;
0-
b0 W
b0 !"
b0 q"
b101100 L
b101100 f"
b101100 ?#
b10 H
b10 1"
b10 <"
b0 D
b0 4"
b0 8"
b0 A"
b0 /#
b10 I
b10 0"
b10 ;"
b0 E
b0 5"
b0 9"
b0 B"
b0 .#
b0 *
b0 9
b0 e
b0 D"
b0 *#
b101100 i"
b1000000000000000000000011000 U
b1000000000000000000000011000 P"
b1000000000000000000000011000 >#
b101 x
b101 W"
b101 k"
b100 b
b100 I"
b100 o"
b1 ^
b1 ,"
b1 K"
b111 O
b111 N"
b111 "#
b101 u
b101 F"
b101 a"
b101 v
b101 E"
b101 \"
b1 s
b1 G"
b100 f
b100 ~
b100 H"
b11100 V
b11100 h"
b11100 E#
b0 c
b0 R"
b0 D#
b0 l
b0 Q"
b0 )#
b101100 J
b101100 O"
b101100 e"
b101100 B#
b101000 K
b101000 =#
b101000 @#
b101000 A#
1!
#38
0!
#39
b10 G
b10 p"
b10 $#
b0 U
b0 P"
b0 >#
b10 j
b10 _"
b10 n"
b10 i
b10 {
b10 d"
b10 ##
b0 ?"
b0 7
05
b0 ="
b0 n
1>
04
b0 +
b0 8
b0 <
b0 ;
03
1%
b11000 L
b11000 f"
b11000 ?#
b11 x"
b11000 i"
b11000 N
b11000 g"
b11000 :#
b11000 X
b11000 +#
b11000 9#
b10 *
b10 9
b10 e
b10 D"
b10 *#
b100 W
b100 !"
b100 q"
b0 @
b0 }
b0 2"
b0 (#
1%#
b0 {"
b0 y"
b110000 J
b110000 O"
b110000 e"
b110000 B#
b101100 K
b101100 =#
b101100 @#
b101100 A#
b1001000 V
b1001000 h"
b1001000 E#
b101100 c
b101100 R"
b101100 D#
b1000000000000000000000011000 l
b1000000000000000000000011000 Q"
b1000000000000000000000011000 )#
b0 b
b0 I"
b0 o"
b0 ]
b0 +"
b0 :"
b0 L"
b0 &#
b0 ^
b0 ,"
b0 K"
b10 u
b10 F"
b10 a"
b10 v
b10 E"
b10 \"
b1010 s
b1010 G"
b0 f
b0 ~
b0 H"
b1 [
b1 |
b1 M"
b101 Y
b101 &"
b101 u"
b101 5#
b0 y
b0 ""
b0 S"
b0 ]"
b0 b"
b0 t"
b0 4#
b100 g
b100 #"
1!
#40
0!
#41
b1 ?"
b1 7
15
b1010 ="
b11100 L
b11100 f"
b11100 ?#
b10001010 n
0>
b11100 i"
14
b10001010 +
b10001010 8
b10001010 <
b1010 ;
13
0%
b1 {"
1("
b0 W
b0 !"
b0 q"
0%#
b0 *
b0 9
b0 e
b0 D"
b0 *#
b10001000000100001 U
b10001000000100001 P"
b10001000000100001 >#
b0 x
b0 W"
b0 k"
b10 Y
b10 &"
b10 u"
b10 5#
b0 a
b0 $"
b0 '"
b0 T"
b100 y
b100 ""
b100 S"
b100 ]"
b100 b"
b100 t"
b100 4#
b0 g
b0 #"
b1 \
b1 %"
b1 U"
b10 b
b10 I"
b10 o"
b0 s
b0 G"
b0 [
b0 |
b0 M"
b11100 V
b11100 h"
b11100 E#
b0 c
b0 R"
b0 D#
b0 l
b0 Q"
b0 )#
b11100 J
b11100 O"
b11100 e"
b11100 B#
b11000 K
b11000 =#
b11000 @#
b11000 A#
1!
#42
0!
#43
b100000 L
b100000 f"
b100000 ?#
b100000 i"
b10101100011000100000000000000001 U
b10101100011000100000000000000001 P"
b10101100011000100000000000000001 >#
b100001 R
b100001 ,#
b10 C
b10 C"
b10 1#
b101 H
b101 1"
b101 <"
b1 D
b1 4"
b1 8"
b1 A"
b1 /#
b100 W
b100 !"
b100 q"
1%#
b0 {"
0("
1)"
1/"
b100000 J
b100000 O"
b100000 e"
b100000 B#
b11100 K
b11100 =#
b11100 @#
b11100 A#
b111000 V
b111000 h"
b111000 E#
b11100 c
b11100 R"
b11100 D#
b10001000000100001 l
b10001000000100001 Q"
b10001000000100001 )#
b0 b
b0 I"
b0 o"
b1010 s
b1010 G"
b1 [
b1 |
b1 M"
b0 y
b0 ""
b0 S"
b0 ]"
b0 b"
b0 t"
b0 4#
b0 \
b0 %"
b0 U"
b0 `
b0 *"
b0 Y"
b100 x
b100 W"
b100 k"
b1 Z
b1 Z"
1!
#44
0!
#45
b101 i
b101 {
b101 d"
b101 ##
b0 U
b0 P"
b0 >#
b1001 W
b1001 !"
b1001 q"
b111 G
b111 p"
b111 $#
1z
1,
b0 ?"
b1 >"
b1 :
12
16
b0 7
05
b100 ="
b10100 n
04
b10100 +
b10100 8
b10100 <
b100 ;
03
b100100 L
b100100 f"
b100100 ?#
0)"
0/"
b1 {"
1("
b10 @
b10 }
b10 2"
b10 (#
b0 N
b0 g"
b0 :#
b0 X
b0 +#
b0 9#
b1 S
b1 @"
b1 ;#
b1 C#
b1 P
b1 -#
b1 <#
b0 R
b0 ,#
b0 C
b0 C"
b0 1#
b10 H
b10 1"
b10 <"
b10 D
b10 4"
b10 8"
b10 A"
b10 /#
b11 E
b11 5"
b11 9"
b11 B"
b11 .#
b101011 *
b101011 9
b101011 e
b101011 D"
b101011 *#
b100100 i"
b0 x
b0 W"
b0 k"
b0 Z
b0 Z"
b100 y
b100 ""
b100 S"
b100 ]"
b100 b"
b100 t"
b100 4#
b1 \
b1 %"
b1 U"
b10 _
b10 J"
b10 '#
b1 ]
b1 +"
b1 :"
b1 L"
b1 &#
b101 u
b101 F"
b101 a"
b10 I
b10 0"
b10 ;"
b100100 V
b100100 h"
b100100 E#
b100000 c
b100000 R"
b100000 D#
b10101100011000100000000000000001 l
b10101100011000100000000000000001 Q"
b10101100011000100000000000000001 )#
b100100 J
b100100 O"
b100100 e"
b100100 B#
b100000 K
b100000 =#
b100000 @#
b100000 A#
1!
#46
0!
#47
b1001 i
b1001 {
b1001 d"
b1001 ##
b1 ?"
b1 7
15
b1010 ="
14
13
0z
b1010 ;
0,
b0 >"
b10001010 n
b10001010 +
b10001010 8
b10001010 <
b0 :
02
06
0Q
b101000 L
b101000 f"
b101000 ?#
0v"
b0 x"
b101000 i"
b101 H
b101 1"
b101 <"
b0 D
b0 4"
b0 8"
b0 A"
b0 /#
b101 I
b101 0"
b101 ;"
b0 E
b0 5"
b0 9"
b0 B"
b0 .#
b0 *
b0 9
b0 e
b0 D"
b0 *#
b1011 W
b1011 !"
b1011 q"
b1001 G
b1001 p"
b1001 $#
0%#
b10 q
b10 ."
b10 `"
b10 {"
b1 y"
1)"
1/"
b101000 J
b101000 O"
b101000 e"
b101000 B#
b100100 K
b100100 =#
b100100 @#
b100100 A#
b101000 V
b101000 h"
b101000 E#
b100100 c
b100100 R"
b100100 D#
b0 l
b0 Q"
b0 )#
b101011 b
b101011 I"
b101011 o"
b0 _
b0 J"
b0 '#
b10 ]
b10 +"
b10 :"
b10 L"
b10 &#
b11 ^
b11 ,"
b11 K"
b1 O
b1 N"
b1 "#
b10 u
b10 F"
b10 a"
b100 s
b100 G"
b1 f
b1 ~
b1 H"
b0 [
b0 |
b0 M"
b101 Y
b101 &"
b101 u"
b101 5#
b10 a
b10 $"
b10 '"
b10 T"
b1001 y
b1001 ""
b1001 S"
b1001 ]"
b1001 b"
b1001 t"
b1001 4#
b100 x
b100 W"
b100 k"
b1 Z
b1 Z"
1!
#48
0!
#49
b101 G
b101 p"
b101 $#
b1010 W
b1010 !"
b1010 q"
b101 i
b101 {
b101 d"
b101 ##
b101 j
b101 _"
b101 n"
b10 x"
b101100 L
b101100 f"
b101100 ?#
b11 y"
13#
1s"
0("
b0 q
b0 ."
b0 `"
b0 @
b0 }
b0 2"
b0 (#
1%#
b101100 i"
b1000000000000000000000011000 U
b1000000000000000000000011000 P"
b1000000000000000000000011000 >#
b10 `
b10 *"
b10 Y"
b1001 x
b1001 W"
b1001 k"
b1001 Y
b1001 &"
b1001 u"
b1001 5#
b1011 y
b1011 ""
b1011 S"
b1011 ]"
b1011 b"
b1011 t"
b1011 4#
b1 g
b1 #"
b0 \
b0 %"
b0 U"
b0 b
b0 I"
b0 o"
b0 ]
b0 +"
b0 :"
b0 L"
b0 &#
b0 ^
b0 ,"
b0 K"
b101 u
b101 F"
b101 a"
b101 v
b101 E"
b101 \"
b1010 s
b1010 G"
b0 f
b0 ~
b0 H"
b1 [
b1 |
b1 M"
b101100 V
b101100 h"
b101100 E#
b101000 c
b101000 R"
b101000 D#
b101100 J
b101100 O"
b101100 e"
b101100 B#
b101000 K
b101000 =#
b101000 @#
b101000 A#
1!
#50
0!
